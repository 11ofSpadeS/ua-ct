// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.1 Build 720 11/11/2020 SJ Lite Edition"

// DATE "12/20/2022 12:10:07"

// 
// Device: Altera EP4CE6E22C6 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module SecDec1101 (
	y,
	clk,
	x);
output 	y;
input 	clk;
input 	x;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \y~output_o ;
wire \clk~input_o ;
wire \x~input_o ;
wire \inst10~0_combout ;
wire \inst~q ;
wire \inst9~combout ;
wire \inst1~q ;
wire \inst3~combout ;


cycloneive_io_obuf \y~output (
	.i(\inst3~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\y~output_o ),
	.obar());
// synopsys translate_off
defparam \y~output .bus_hold = "false";
defparam \y~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \clk~input (
	.i(clk),
	.ibar(gnd),
	.o(\clk~input_o ));
// synopsys translate_off
defparam \clk~input .bus_hold = "false";
defparam \clk~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \x~input (
	.i(x),
	.ibar(gnd),
	.o(\x~input_o ));
// synopsys translate_off
defparam \x~input .bus_hold = "false";
defparam \x~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst10~0 (
// Equation(s):
// \inst10~0_combout  = (\inst1~q  & ((\x~input_o ) # (!\inst~q )))

	.dataa(\inst1~q ),
	.datab(\x~input_o ),
	.datac(gnd),
	.datad(\inst~q ),
	.cin(gnd),
	.combout(\inst10~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst10~0 .lut_mask = 16'h88AA;
defparam \inst10~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas inst(
	.clk(\clk~input_o ),
	.d(\inst10~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst~q ),
	.prn(vcc));
// synopsys translate_off
defparam inst.is_wysiwyg = "true";
defparam inst.power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb inst9(
// Equation(s):
// \inst9~combout  = (\inst1~q  & ((!\inst~q ))) # (!\inst1~q  & (\x~input_o  & \inst~q ))

	.dataa(\x~input_o ),
	.datab(gnd),
	.datac(\inst1~q ),
	.datad(\inst~q ),
	.cin(gnd),
	.combout(\inst9~combout ),
	.cout());
// synopsys translate_off
defparam inst9.lut_mask = 16'h0AF0;
defparam inst9.sum_lutc_input = "datac";
// synopsys translate_on

dffeas inst1(
	.clk(\clk~input_o ),
	.d(\inst9~combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst1~q ),
	.prn(vcc));
// synopsys translate_off
defparam inst1.is_wysiwyg = "true";
defparam inst1.power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb inst3(
// Equation(s):
// \inst3~combout  = (\inst1~q  & (\inst~q  & \x~input_o ))

	.dataa(\inst1~q ),
	.datab(\inst~q ),
	.datac(\x~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst3~combout ),
	.cout());
// synopsys translate_off
defparam inst3.lut_mask = 16'h8080;
defparam inst3.sum_lutc_input = "datac";
// synopsys translate_on

assign y = \y~output_o ;

endmodule
